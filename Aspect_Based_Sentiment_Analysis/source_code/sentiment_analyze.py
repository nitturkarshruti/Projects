# -*- coding: utf-8 -*-
"""analyze_sentiment.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1bTqMICOxszTEupeiyyIh1rpxxz7zjehA
"""

import nltk
nltk.download('vader_lexicon')
nltk.download('punkt')
from nltk.tokenize import word_tokenize
from nltk.sentiment import SentimentIntensityAnalyzer
import pandas as pd
import csv

from google.colab import drive
drive.mount('/content/drive')

def analyze_sentiment(sentence, feature_list):
    sid = SentimentIntensityAnalyzer()
    tokenized_sentence = word_tokenize(sentence.lower())
    result = {}

    for feature, keywords in feature_list:
        feature_sentiment = [0, 0, 0]  # [positive, negative, neutral]
        for word in tokenized_sentence:
            if word in keywords:
                sentiment_score = sid.polarity_scores(word)
                if sentiment_score['compound'] >= 0.05:
                    feature_sentiment[0] += 1  # Positive
                elif sentiment_score['compound'] <= -0.05:
                    feature_sentiment[1] += 1  # Negative
                else:
                    feature_sentiment[2] += 1  # Neutral
        result[feature] = feature_sentiment

    return result

sentence = "Great location and well equipped for an extended stay."
feature_list = [['location', ['great']], ['stay', ['extended']]]


output = analyze_sentiment(sentence, feature_list)
print(output)

import ast
def analyze_sentiment(feature_list):
    sid = SentimentIntensityAnalyzer()
    result = {}

    for feature_keywords in feature_list:
        feature = feature_keywords[0]
        keywords = feature_keywords[1]
        feature_sentiment = [0, 0, 0]  # [positive, negative, neutral]
        for word in keywords:
            sentiment_score = sid.polarity_scores(word)
            if sentiment_score['compound'] >= 0.05:
                feature_sentiment[0] += 1  # Positive
            elif sentiment_score['compound'] <= -0.05:
                feature_sentiment[1] += 1  # Negative
            else:
                feature_sentiment[2] += 1  # Neutral
        result[feature] = feature_sentiment

    return result

# Mount Google Drive
from google.colab import drive
drive.mount('/content/drive')

# Load CSV file from Google Drive
csv_file_path = '/content/drive/My Drive/output_2023.csv'  # Update with your CSV file path
df = pd.read_csv(csv_file_path, encoding="utf-8")[0:10]  # Read only first 2 rows for demonstration
feature_lists = df["finalcluster"].apply(lambda x: ast.literal_eval(x)).tolist()

# Perform sentiment analysis for each feature list
results = []
for feature_list in feature_lists:
    results.append(analyze_sentiment(feature_list))

# Display results
for result in results:
     print(result)

# Add results as a new column in the DataFrame
df['SentimentResults'] = results

# Write the DataFrame back to the CSV file
df.to_csv('/content/drive/My Drive/sentiment_analysis_2023.csv', index=False)