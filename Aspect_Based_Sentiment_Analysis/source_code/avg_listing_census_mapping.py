# -*- coding: utf-8 -*-
"""avg_listing_census_mapping.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1UClHV5zZklKBVVZbWqJ401V_1YdTFIbb
"""

from google.colab import drive
drive.mount('/content/drive')

import pandas as pd

# Load sentiment analysis data
sentiment_df = pd.read_csv("/content/drive/My Drive/sentiment_analysis_2023.csv")

# Load reviews-listings mapping data
mapping_df = pd.read_csv("/content/drive/My Drive/reviews_listings_mapping_200.csv")

# Function to calculate average sentiment for each aspect
def calculate_average_sentiment(group):
    total_sentiment = {aspect: [0, 0, 0] for aspect in aspects}
    num_reviews = len(group)
    for _, row in group.iterrows():
        sentiment_results = eval(row['SentimentResults'])
        for aspect, sentiment_values in sentiment_results.items():
            total_sentiment[aspect] = [x + y for x, y in zip(total_sentiment[aspect], sentiment_values)]
    average_sentiment = {aspect: [x / num_reviews for x in sentiment_values] for aspect, sentiment_values in total_sentiment.items()}
    return pd.Series(average_sentiment)

# Group mapping data by Census Tract and join it with sentiment data based on listing_id
grouped_mapping = mapping_df.groupby('Census Tract').apply(lambda x: pd.merge(x, sentiment_df, on='listing_id')).reset_index(drop=True)

# Group sentiment data by Census Tract and calculate average sentiment for each aspect
aspects = sentiment_df['SentimentResults'].apply(eval).apply(lambda x: list(x.keys())).explode().unique()
grouped_sentiment = grouped_mapping.groupby('Census Tract').apply(calculate_average_sentiment).reset_index()

# Write the result to a new CSV file
print("save to csv")
output_file = "/content/drive/My Drive/avg_listing_census_mapping.csv"
grouped_sentiment.to_csv(output_file, index=False)
print("saved to csv")